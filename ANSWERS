1. What would the following block of code print to the console?
Code
  numbers = [1, 3, 5, 8, 13]
  for number in numbers:
      print(number * 2)
Answer:
2
6
10
16
26


2. Which style of code you think would be more readable, understandable, and maintainable?
Code A
  u=input("Hello, enter your name")
  print("Hello "+u+".")
  a=int(input("Enter your age"))
  print("You are "+(a*365*24*60*60)+" seconds old.")

Code B
  user_name = input("Hello, enter your name: ")
  print("Hello, {}.".format(user_name))

  user_age = int(input("Enter your age: "))
  print("You are {} seconds old.".format(age_to_seconds(user_age)))

  def age_to_seconds(years):
      return years * 365 * 24 * 60 * 60

Answer: Code B's style
  Although some might say this is a subjective matter of preference, there are a few clear indicators that say Code B's style is better:
   The variables have proper names, as opposed to u or a.
  There is spacing around operators, which makes them easier to distinguish.
  There is a method with a nice name (age_to_seconds), which tells us what the method does even without looking at its contents.
  The use of .format instead of adding strings makes the strings easier to read, even though the code is longer.



3. Which of the following list comprehensions is valid?
Answer:   [elem for elem in my_elements]



4. What are the types of the two contents below?
Content A
    {"students":
        [
            {"name": "Jose", "marks": [15, 67, 45]},
            {"name": "Rolf", "marks": [67, 88, 99]},
            {"age": 45}
        ]
    }
Content B
      Jose,15;67;45
      Rolf,67;88;99
      
Answer:      Content A is JSON, Content B is CSV



5. What would be printed out to the console in the following code?
Code
          class StudentList:
              def __init__(self):
                  self.__students = []

              def add(self, student):
                  if not isinstance(student, Student):
                      raise TypeError("Incorrect type: tried to add a {} instead of a Student.".format(type(student)))
                  self.__students.append(student)

              def pop(self):
                  if len(self.__students) <= 0:
                      raise EmptyListError("Tried to remove from the list but it was already empty.")
                  first_element = self.__students[0]
                  self.__students.remove(first_element)
                  return first_element

          class Student:
              def __init__(self, name):
                  self.name = name

          class EmptyListError(Exception):
              def __init__(self, message):
                  self.message = message

            student_list = StudentList()
            student_list.add("John")
            print(student_list)
            
Answer:   Incorrect type: tried to add a type 'str' instead of a Student.


6. What is a lambda function?
Answer:   A shorter, one-line function, without a name.



7. What would the following block of code print to the console?
Code
    print("{}".format([x for x in range(10) if x % 2 == 0]))

Answer:   [0, 2, 4, 6, 8]


8. What would the following block of code print out to the console?
Code
        class Person:
            def __init__(self, name):
                self.name = name


        class Student(Person):
            TYPES = ('school', 'college', 'university')

            def __init__(self, name, student_type):
                super().__init__(name)
                if student_type not in Student.TYPES:
                    raise TypeError("Incorrect student type, entered {} but expected one of {}.".format(student_type, Student.TYPES))
                self.student_type = student_type

        student = Student("John", "college")
        print(student.name)
        print(student.student_type)
Answer:
          John
          college



9. What would the following block of code print to the console?
Code
          people = ["Jose", "Rolf", "Anna", "Rob"]
          for person in people:
               print(people)
Answer:
            ["Jose", "Rolf", "Anna", "Rob"]
            ["Jose", "Rolf", "Anna", "Rob"]
            ["Jose", "Rolf", "Anna", "Rob"]
            ["Jose", "Rolf", "Anna", "Rob"]




10. What would the following block of code print to the console?
Code
          z = [0, 1, 2, 3]
          while z[2] in z:
              print(z[2])
Answer:
          2
          2
          2
          2
          2
          2
          2
          2
          2
          (continues endlessly)



11. Which of the following blocks of code are valid? They must not contain or produce any errors.
Code A
          user_number = input(“Enter four numbers, separated by commas: “);
          user_number_list = user_number.split(“,”);
          print(“The sum of these is {}”.format(sum([int(x) for x in user_number_list])));
Code B
          user_number = input("Enter four numbers, separated by commas: "),
          user_number_list = user_number.split(",")
          print("The sum of these is {}.".format(sum([int(x) for x in user_number_list])))
Code C
          user_number = input("Enter four numbers, separated by commas: ")
          user_number_list = user_number.split(",")
          print("The sum of these is {}.".format(sum([int(x) for x in user_number_list])))
Code D
            user_number = input("Enter four numbers, separated by commas: ")
            user_number_list = user_number.split("-")
            print("The sum of these is {}.".format(sum([int(x) for x in user_number_list])))
          
Answer:    Code C is correct



12. What is the correct way of declaring a list in Python?
Answer:   my_list = [ 1, 2, 3, 4] 


13. What is the difference between using single quotation marks or double quotation marks in Python?
Answer:     You can use either—there is no difference.



14. Which code block would ask the user for a number, and print that number multiplied by 3.14?
Code A
      user_number = input(“Enter a number: “)
      print(user_number * 3.14)
Code B
      user_number = input(“Enter a number: “)
      print(user_number * int(3.14))
Code C
      user_number = int(input(“Enter a number: “)
      print(user_number * 3.14)
Code D
      print(input(“Enter a number: “) * 3.14)
Answer:     Code C



15. What is the difference between a set and a list?
Answer:   A set is a collection of unique, unordered elements; whereas a list is a collection of ordered elements.


16. What would the following block of code print to the console?
Code
      print("Hello, world!")
      
Answer:   Hello, world!


17. What would the following block of code print to the console?
Code
      class MyClass:
          class_property = 'Hello'

      object_one = MyClass()
      object_two = MyClass()

      MyClass.class_property = "Goodbye"

      print(object_two.class_property)

Answer:   Goodbye



18. What would the following block of code print out to the console?
Code
          class Student:
          def __init__(self, name):
          self.name = name
          def __repr__(self):
          return "(Student {})".format(self.name)

          print(Student("Jose"))
 
Answer:   (Student Jose)


19. What does a double underscore in front of a property of an object mean?
Answer:     It means the property is private and should not be accessed by other objects.


20. Which of the following blocks of code are valid? They must not contain or produce any errors.
Code A
          class Student:
            self.name = name
            self.marks = []

            def add_mark(self, mark):
                self.marks.append(mark)

          student = Student("Jose")
          student.add_mark(57)
          student.add_mark(78)

          print("Average mark: {}.".format(sum(student.marks) / len(student.marks)))
Code B
            class Student:
                def __init__(self, name):
                    self.name = name
                    self.marks = []

                def add_mark(self, mark):
                    self.marks.append(mark)

            student = Student("Jose")
            student.add_mark(57)
            student.add_mark(78)

            print("Average mark: {}.".format(sum(student.marks) / len(student.marks)))
Code C
            class Student:
                def __init__(self, name):
                    self.name = name
                    self.marks = []

                def add_mark(self, mark):
                    self.marks.append(mark)

            student = Student("Jose")
            student.add_mark(57)
            student.add_mark(78)

            print("Average mark: {}.".format(student.marks / len(student.marks)))
Code D
            class Student:
                def __init__(name):
                    name = name
                    marks = []

                def add_mark(mark):
                    marks.append(mark)

            student = Student("Jose")
            student.add_mark(57)
            student.add_mark(78)

            print("Average mark: {}.".format(sum(student.marks) / len(student.marks)))

Answer: Code B is correct


21. From the below, select the correct way of declaring a variable in Python without assigning it a value.
Answer:   It can't be done.


22. Which of the following blocks of code are valid? They must not contain or produce any errors.
Warning: this is a tricky question. Pay close attention!

Code A
            users = [
                {
                    'name': 'Rolf',
                    'age': 34
                },
                {
                    'name': 'Anna',
                    'age': 28
                }
            ]

            def print_users_list(user_list):
                for i, user in enumerate(user_list):
                    print_user_details(i, user)

            def print_user_details(number, user):
                print("{} | name: {}, age: {}.".format(number, user['name'], user['age']))

            print_user_list(users)
Code B
            users = [
              {
                  'name': 'Rolf',
                  'age': 34
              },
              {
                  'name': 'Anna',
                  'age': 28
              }
            ]

            def print_users_list(user_list):
              for i, user in enumerate(user_list):
                  print_user_details(i, user)

            def print_user_details(number, user):
              print("{} | name: {}, age: {}.".format(number, user.name, user.age))

            print_users_list(users)
Code C
                users = [
                    {
                        'name': 'Rolf',
                        'age': 34
                    },
                    {
                        'name': 'Anna',
                        'age': 28
                    }
                ]

                def print_users_list(users):
                    for i, user in enumerate(user_list):
                        print_user_details(i, user)

                def print_user_details(number, user):
                    print("{} | name: {}, age: {}.".format(number, user['name'], user['age']))

                print_users_list(users)
Code D
            users = [
                {
                    name: 'Rolf',
                    age: 34
                },
                {
                    name: 'Anna',
                    age: 28
                }
            ]

            def print_users_list(user_list):
                for i, user in enumerate(user_list):
                    print_user_details(i, user)

            def print_user_details(number, user):
                print("{} | name: {}, age: {}.".format(number, user['name'], user['age']))

            print_users_list(users)

Answer:   Code C is correct



23. What would the value of output_variable be at the end of this code block?
Code
      output_variable = "John",
Answer:     ("John",)


24. What would the value of output_variable be at the end of the following code block?
Code
                name = 'John'
                people = [
                     {
                          'name': 'John',
                          'description': 'a fun guy'
                     },
                     {
                          'name': 'Anne',
                          'description': 'a childhood friend'
                     }
                ]

                if name.lower() in [person['name'].lower() for person in people]:
                     output_variable = hello_phrase(person)
                else:
                     output_variable = unknown_phrase(person)

                def hello_phrase(person):
                     return "Welcome back, {}! You're {}.".format(person['name'], person['description'])

                def unknown_phrase(person):
                     return "Sorry, {}. I don't know you!".format(person['name'])

Answer:   Welcome back, John! You're a fun guy.


25. What is list comprehension?
Answer:       A way to create lists by iterating over another iterable element (like a string, another list, a set, etc…).
